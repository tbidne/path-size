name: ci

on:
  push:
    branches:
      - main
      - release

  pull_request:
    branches:
      - main
      - release

  workflow_dispatch:

jobs:
  # cabal:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       ghc:
  #         - "9.2.8"
  #         - "9.4.8"
  #         - "9.6.5"
  #         - "9.8.2"
  #         - "9.10.1"
  #       os:
  #       - "macos-latest"
  #       - "ubuntu-latest"
  #       - "windows-latest"
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: haskell-actions/setup@v2
  #       with:
  #         ghc-version: ${{ matrix.ghc }}

  #     - name: Configure
  #       run: cabal configure --enable-tests --enable-benchmarks --ghc-options -Werror

  #     - name: Compile
  #       run: cabal build path-size:exe:path-size

  #     - name: Unit Tests
  #       run: cabal test unit --test-options '--hedgehog-tests 100000'

  #     - name: Functional Tests
  #       id: functional
  #       run: cabal test functional

  #     - uses: actions/upload-artifact@v3
  #       name: CLI Tests Upload
  #       if: ${{ failure() && steps.functional.conclusion == 'failure' }}
  #       with:
  #         name: functional-tests-artifacts
  #         path: |
  #           test/functional/goldens/*

  #     # Only benchmark on ubuntu to reduce maintenance burden as other
  #     # benchmarks are not really actionable.

  #     - name: Benchmark Tasty
  #       if: ${{ matrix.os == 'ubuntu-latest' }}
  #       id: bench-tasty
  #       run: |
  #         cabal bench bench-tasty --benchmark-options '
  #           +RTS -T -RTS -t100
  #           --csv bench/tasty/bench_${{ matrix.os }}_${{ matrix.ghc }}_ci.csv
  #           --svg bench/tasty/bench_${{ matrix.os }}_${{ matrix.ghc }}_ci.svg
  #           --baseline bench/tasty/baseline_${{ matrix.os }}_${{ matrix.ghc }}_ci.csv
  #           --fail-if-slower 30
  #           --fail-if-faster 30'

  #     - name: Benchmark Criterion
  #       if: ${{ matrix.os == 'ubuntu-latest' && (failure() || success()) }}
  #       id: bench-criterion
  #       run: |
  #         cabal bench bench-criterion --benchmark-options '
  #           --csv bench/criterion/bench_${{ matrix.os }}_${{ matrix.ghc }}_ci.csv
  #           --output bench/criterion/bench_${{ matrix.os }}_${{ matrix.ghc }}_ci.html'

  #     - uses: actions/upload-artifact@v3
  #       if: ${{ failure() && (steps.bench-tasty.conclusion == 'failure' || steps.bench-criterion.conclusion == 'failure' ) }}
  #       with:
  #         name: build-artifacts
  #         path: |
  #           bench/criterion/bench_${{ matrix.os }}_${{ matrix.ghc }}_ci.csv
  #           bench/criterion/bench_${{ matrix.os }}_${{ matrix.ghc }}_ci.html
  #           bench/tasty/bench_${{ matrix.os }}_${{ matrix.ghc }}_ci.csv
  #           bench/tasty/bench_${{ matrix.os }}_${{ matrix.ghc }}_ci.svg
  # nix:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os:
  #       - "macos-latest"
  #       - "ubuntu-latest"
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Setup nix
  #       uses: cachix/install-nix-action@v25
  #       with:
  #         github_access_token: ${{ secrets.GITHUB_TOKEN }}
  #         nix_path: nixpkgs=channel:nixos-unstable

  #     - name: Compile & Test
  #       run: nix build
  # lint:
  #   runs-on: "ubuntu-latest"
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Setup nix
  #       uses: cachix/install-nix-action@v25
  #       with:
  #         github_access_token: ${{ secrets.GITHUB_TOKEN }}
  #         nix_path: nixpkgs=channel:nixos-unstable

  #     - name: Formatting
  #       run: |
  #         nix run .#format
  #         git diff --exit-code --color=always

  #     - name: HLint
  #       run: nix run .#lint
  release_osx:
    #needs: [cabal, nix, lint]
    if: github.ref == 'refs/heads/release'
    strategy:
      fail-fast: false
      matrix:
        os:
          - "macos-12"
          - "macos-13"
          - "macos-14"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: haskell-actions/setup@v2
        with:
          ghc-version: "9.8.2"
      - name: Install binary
        run: |
          .github/scripts/release_osx.sh
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.os }}
          path: bin
  release_linux_static:
    #needs: [cabal, nix, lint]
    if: github.ref == 'refs/heads/release'
    strategy:
      fail-fast: false
      matrix:
        dir:
          - "alpine_amd64"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker-practice/actions-setup-docker@master
      - name: Install binary
        run: |
          .github/scripts/release_linux_static.sh ${{ matrix.dir }}
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.dir }}
          path: bin
  release_linux:
    #needs: [cabal, nix, lint]
    if: github.ref == 'refs/heads/release'
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v4
      - uses: haskell-actions/setup@v2
        with:
          ghc-version: "9.8.2"
      - name: Install binary
        run: |
          .github/scripts/release_linux.sh
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-ubuntu-latest
          path: bin
  merge:
    runs-on: "ubuntu-latest"
    needs: [release_osx, release_linux, release_linux_static]
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: build-artifacts
          pattern: build-artifacts-*
          delete-merged: true
